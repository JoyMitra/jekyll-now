---
layout: post
title: Debug an Android app!
---

To undertsand the internals of an Android app, it often helps if one can step through its source code just like you would do when developing the app. But if all you have is the apk for the app then debugging it becomes quite a task. 
In following steps I enumerate what it takes to successfully re-engineer and debug an Android app from its apk.

1. Install the app onto an Android device. Connect the device to a PC via USB and run the following commands:

    Get the _<package name>_ of the app you want to analyze.
    `$ adb shell pm list packages`

    Get the _<apk path>_ where the _<package name>_ is installed.
    `$ adb shell pm path <package name>`
  
    Transfer the apk file to PC.
    `$ adb pull <apk path> /path/to/where/you/want/apk`

2.  Use [ApkTool](https://ibotpeaches.github.io/Apktool/) to decompile the apk. This will give _smali_ code which is the assembler for the _Dalvik Virtual Machine_.

3.  Modify _AndroidManifest.xml_ by adding _android:debuggable=true_ to _<application>_ tag. _AndroidManifest.xml_ is available in the folder that contains the decompiled code obtained after running _ApkTool_.
  
4.  Re-build the decompiled code after necessary/desired changes using [ApkTool](https://ibotpeaches.github.io/Apktool/).

5.  Sign the apk using Java's key management utility _keytool_.

    `$ keytool -genkey -v -keystore key.keystore -alias sign -keyalg RSA -keysize 2048 -validity 10000`
    
    `$ jarsigner -verbose  -sigalg SHA1withRSA -digestalg SHA1 -keystore key.keystore <apk-name> sign`
    
    Note : _apk-name_ is the name of the apk file that will be generated by ApkTool in step 4.
    
6. Install the apk generated in step 4 and signed in step 5 into a connected device or emulator using adb.
    
    `$ adb install <apk name>`
    
7. We will need the SmaliIdea Plugin for IntelliJ to debug Smali code. Download [here](https://bitbucket.org/JesusFreke/smali/downloads/). At the time of writing the version was smalidea-0.05.zip.
    
7. Open the IntelliJ IDEA IDE. Install the community version [here](https://www.jetbrains.com/idea/download/#section=mac) if you do not have it.

8. Click on _Configure/Plugins_ at the bottom right corner. Choose _Install Plugin from Disk_. Select the location where _smalidea-0.05.zip_ is saved. Restart IntelliJ.

9. Once restarted click _Import Project_ and point to the folder that was generated by ApkTool when decompiling the apk. Select _Create from external sources_ and click next. The project should be created.

10. Right click on the root folder in the Project window and click on _Mark Directory as/Sources Root_.

11. Attach the project to the dubug port of the app running on the device. To know which port the app is running open _Android Monitor_.

    `$ path/to/AndroidStudio/.../tools/monitor`
    
    A window should open up. The column _debug_ against the package name of the app is the debug port of the app.
    
12. Navigate to _Run/Edit Run Configurations_. Add a new _Remote_ run configuration by clicking on the _+_ icon. Set the port to the port displayed in _Android monitor_.

13. Set breakpoints and start debugging. You will be debugging _smali_ code and not the original source code. But once you get a hold of _smali_ it shouldn't be too hard to understand what the app is doing under the hood. [Here](https://source.android.com/devices/tech/dalvik/dalvik-bytecode) is some documentation to understand _smali_.

Happy hacking!
